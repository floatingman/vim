[{'word': 'BPF', 'menu': '[I]', 'kind': 'v', 'abbr': 'BPF', 'dup': 1}, {'word': 'LOG4', 'menu': '[I]', 'kind': 'v', 'abbr': 'LOG4', 'dup': 1}, {'word': 'NV_MAGICCONST', 'menu': '[I]', 'kind': 'v', 'abbr': 'NV_MAGICCONST', 'dup': 1}, {'word': 'RECIP_BPF', 'menu': '[I]', 'kind': 'v', 'abbr': 'RECIP_BPF', 'dup': 1}, {'word': 'Random', 'menu': '[I]', 'kind': 'c', 'abbr': 'Random(_random.Random): <class>', 'dup': 1}, {'word': 'SG_MAGICCONST', 'menu': '[I]', 'kind': 'v', 'abbr': 'SG_MAGICCONST', 'dup': 1}, {'word': 'SystemRandom', 'menu': '[I]', 'kind': 'c', 'abbr': 'SystemRandom(Random): <class>', 'dup': 1}, {'word': 'TWOPI', 'menu': '[I]', 'kind': 'v', 'abbr': 'TWOPI', 'dup': 1}, {'word': 'VERSION', 'menu': 'Random', 'kind': 'v', 'abbr': 'VERSION', 'dup': 1}, {'word': '_BuiltinMethodType', 'menu': '[I]', 'kind': 'i', 'abbr': 'from types import MethodType as _MethodType, BuiltinMethodType as _BuiltinMethodType', 'dup': 1}, {'word': '_MethodType', 'menu': '[I]', 'kind': 'i', 'abbr': 'from types import MethodType as _MethodType, BuiltinMethodType as _BuiltinMethodType', 'dup': 1}, {'word': '_Sequence', 'menu': '[I]', 'kind': 'i', 'abbr': 'from collections.abc import Set as _Set, Sequence as _Sequence', 'dup': 1}, {'word': '_Set', 'menu': '[I]', 'kind': 'i', 'abbr': 'from collections.abc import Set as _Set, Sequence as _Sequence', 'dup': 1}, {'word': '__all__', 'menu': '[I]', 'kind': 'v', 'abbr': '__all__ = ["Random","seed","random","uniform","randint","choice","sample",', 'dup': 1}, {'word': '__init__', 'menu': 'Random', 'kind': 'm', 'abbr': 'def __init__(self, x=None):', 'dup': 1}, {'word': '_acos', 'menu': '[I]', 'kind': 'i', 'abbr': 'from math import sqrt as _sqrt, acos as _acos, cos as _cos, sin as _sin', 'dup': 1}, {'word': '_ceil', 'menu': '[I]', 'kind': 'i', 'abbr': 'from math import log as _log, exp as _exp, pi as _pi, e as _e, ceil as _ceil', 'dup': 1}, {'word': '_cos', 'menu': '[I]', 'kind': 'i', 'abbr': 'from math import sqrt as _sqrt, acos as _acos, cos as _cos, sin as _sin', 'dup': 1}, {'word': '_e', 'menu': '[I]', 'kind': 'i', 'abbr': 'from math import log as _log, exp as _exp, pi as _pi, e as _e, ceil as _ceil', 'dup': 1}, {'word': '_exp', 'menu': '[I]', 'kind': 'i', 'abbr': 'from math import log as _log, exp as _exp, pi as _pi, e as _e, ceil as _ceil', 'dup': 1}, {'word': '_inst', 'menu': '[I]', 'kind': 'v', 'abbr': '_inst = Random()', 'dup': 1}, {'word': '_log', 'menu': '[I]', 'kind': 'i', 'abbr': 'from math import log as _log, exp as _exp, pi as _pi, e as _e, ceil as _ceil', 'dup': 1}, {'word': '_notimplemented', 'menu': 'SystemRandom', 'kind': 'm', 'abbr': 'def _notimplemented(self, *args, **kwds):', 'dup': 1}, {'word': '_pi', 'menu': '[I]', 'kind': 'i', 'abbr': 'from math import log as _log, exp as _exp, pi as _pi, e as _e, ceil as _ceil', 'dup': 1}, {'word': '_randbelow', 'menu': 'Random', 'kind': 'm', 'abbr': '_randbelow', 'dup': 1}, {'word': '_random', 'menu': '[I]', 'kind': 'i', 'abbr': 'import _random', 'dup': 1}, {'word': '_sha512', 'menu': '[I]', 'kind': 'i', 'abbr': '_sha512', 'dup': 1}, {'word': '_sin', 'menu': '[I]', 'kind': 'i', 'abbr': 'from math import sqrt as _sqrt, acos as _acos, cos as _cos, sin as _sin', 'dup': 1}, {'word': '_sqrt', 'menu': '[I]', 'kind': 'i', 'abbr': 'from math import sqrt as _sqrt, acos as _acos, cos as _cos, sin as _sin', 'dup': 1}, {'word': '_test', 'menu': '[I]', 'kind': 'f', 'abbr': '_test', 'dup': 1}, {'word': '_test_generator', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _test_generator(n, func, args):', 'dup': 1}, {'word': '_urandom', 'menu': '[I]', 'kind': 'i', 'abbr': 'from os import urandom as _urandom', 'dup': 1}, {'word': '_warn', 'menu': '[I]', 'kind': 'i', 'abbr': 'from warnings import warn as _warn', 'dup': 1}, {'word': 'betavariate', 'menu': 'Random', 'kind': 'm', 'abbr': 'def betavariate(self, alpha, beta):', 'dup': 1}, {'word': 'choice', 'menu': 'Random', 'kind': 'm', 'abbr': 'def choice(self, seq):', 'dup': 1}, {'word': 'expovariate', 'menu': 'Random', 'kind': 'm', 'abbr': 'def expovariate(self, lambd):', 'dup': 1}, {'word': 'gammavariate', 'menu': 'Random', 'kind': 'm', 'abbr': 'def gammavariate(self, alpha, beta):', 'dup': 1}, {'word': 'gauss', 'menu': 'Random', 'kind': 'm', 'abbr': 'def gauss(self, mu, sigma):', 'dup': 1}, {'word': 'getrandbits', 'menu': 'SystemRandom', 'kind': 'm', 'abbr': 'def getrandbits(self, k):', 'dup': 1}, {'word': 'getstate', 'menu': 'Random', 'kind': 'm', 'abbr': 'def getstate(self):', 'dup': 1}, {'word': 'lognormvariate', 'menu': 'Random', 'kind': 'm', 'abbr': 'def lognormvariate(self, mu, sigma):', 'dup': 1}, {'word': 'normalvariate', 'menu': 'Random', 'kind': 'm', 'abbr': 'def normalvariate(self, mu, sigma):', 'dup': 1}, {'word': 'paretovariate', 'menu': 'Random', 'kind': 'm', 'abbr': 'def paretovariate(self, alpha):', 'dup': 1}, {'word': 'randint', 'menu': 'Random', 'kind': 'm', 'abbr': 'def randint(self, a, b):', 'dup': 1}, {'word': 'random', 'menu': 'SystemRandom', 'kind': 'm', 'abbr': 'def random(self):', 'dup': 1}, {'word': 'randrange', 'menu': 'Random', 'kind': 'm', 'abbr': 'randrange', 'dup': 1}, {'word': 'sample', 'menu': 'Random', 'kind': 'm', 'abbr': 'def sample(self, population, k):', 'dup': 1}, {'word': 'seed', 'menu': 'SystemRandom', 'kind': 'm', 'abbr': 'def seed(self, *args, **kwds):', 'dup': 1}, {'word': 'setstate', 'menu': 'Random', 'kind': 'm', 'abbr': 'def setstate(self, state):', 'dup': 1}, {'word': 'shuffle', 'menu': 'Random', 'kind': 'm', 'abbr': 'def shuffle(self, x, random=None, int=int):', 'dup': 1}, {'word': 'time', 'menu': '[I]', 'kind': 'i', 'abbr': 'import time', 'dup': 1}, {'word': 'triangular', 'menu': 'Random', 'kind': 'm', 'abbr': 'triangular', 'dup': 1}, {'word': 'uniform', 'menu': 'Random', 'kind': 'm', 'abbr': 'def uniform(self, a, b):', 'dup': 1}, {'word': 'vonmisesvariate', 'menu': 'Random', 'kind': 'm', 'abbr': 'def vonmisesvariate(self, mu, kappa):', 'dup': 1}, {'word': 'weibullvariate', 'menu': 'Random', 'kind': 'm', 'abbr': 'def weibullvariate(self, alpha, beta):', 'dup': 1}]
